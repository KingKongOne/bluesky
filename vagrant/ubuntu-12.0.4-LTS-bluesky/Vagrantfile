# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

# The provisioning script is embedded in the Vagrantfile to simplify
# sharing of the Vagrantfile with those lacking access to our repos
$provisioning_script = <<SCRIPT
#!/usr/bin/env bash

sudo apt-get update
sudo apt-get upgrade

sudo apt-get install -y g++ gcc make dkms emacs
sudo apt-get install -y git git-svn
sudo apt-get install -y curl
sudo apt-get install -y tmux

sudo apt-get install -y libnetcdf-dev
sudo apt-get install -y proj
sudo apt-get install -y python-gdal
sudo apt-get install -y libgdal1-1.7.0
sudo apt-get install -y libgdal-dev

sudo apt-get install -y python
sudo apt-get install -y python-pip
sudo pip install --upgrade pip

# install pyenv / virtualenv
if [ -d "/home/vagrant/.pyenv" ]; then
    cd /home/vagrant/.pyenv && git pull
    cd /home/vagrant/.pyenv/plugins/pyenv-virtualenv && git pull
    cd /home/vagrant/.pyenv/plugins/pyenv-pip-rehash && git pull
    chown -R vagrant:vagrant /home/vagrant/.pyenv/
# else
#     git clone https://github.com/yyuu/pyenv.git /home/vagrant/.pyenv
#     git clone https://github.com/yyuu/pyenv-virtualenv.git /home/vagrant/.pyenv/plugins/pyenv-virtualenv
#     git clone https://github.com/yyuu/pyenv-pip-rehash.git /home/vagrant/.pyenv/plugins/pyenv-pip-rehash
fi
cd ~

touch /home/vagrant/.bashrc

if ! hash pyenv 2>/dev/null; then
    echo >> /home/vagrant/.bashrcc
    echo export PYENV_ROOT=/home/vagrant/.pyenv >> /home/vagrant/.bashrc
    echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> /home/vagrant/.bashrc
    echo 'eval "$(pyenv init -)"' >> /home/vagrant/.bashrc
    echo 'eval "$(pyenv virtualenv-init -)"' >> /home/vagrant/.bashrc
    mkdir -p /home/vagrant/.pyenv/shims /home/vagrant/.pyenv/versions
fi

source /home/vagrant/.bashrc

# Couldn't get the following to work during provisioning (got
# `pyenv: command not found` errors).  So, leaving it to user to do it
# pyenv install 2.7.8
# pyenv virtualenv 2.7.8 bluesky-2.7.8
# pyenv global bluesky-2.7.8
# pip install ipython
SCRIPT


Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = "hashicorp/precise64"
  config.vm.provision :shell, inline: $provisioning_script
  config.vm.boot_timeout = 600

  config.ssh.forward_agent = true
  config.ssh.private_key_path = "~/.ssh/id_rsa"
  # config.vm.network "forwarded_port", host: 5080, guest: 5000

  config.vm.provider "virtualbox" do |vb|
    #vb.gui = true  # <-- set to true to not boot in headless mode (i.e. to have a gui)
    vb.customize ["modifyvm", :id, "--memory", "2048"]
  end

  # machine for development work
  config.vm.define "bsp" do
    config.vm.network "private_network", ip: "192.168.33.11"
  end
end
