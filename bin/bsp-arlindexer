#! /usr/bin/env python

__author__ = "Joel Dubowy"
__copyright__ = "Copyright 2015, AirFire, PNW, USFS"

import logging
import traceback

from pyairfire import scripting

try:
    from bluesky.met import arlindexer
except:
    import os
    import sys
    root_dir = os.path.abspath(os.path.join(sys.path[0], '../'))
    sys.path.insert(0, root_dir)
    from bluesky.met import arlindexer

REQUIRED_ARGS = [
    {
        'short': '-d',
        'long': '--domain',
        'help': "domain identifier (e.g. 'DRI2km')"
    },
    {
        'short': '-r',
        'long': '--root-dir',
        'help': "domain root directory (e.g. '/DRI_2km/')"
    }
]
OPTIONAL_ARGS = [
    {
        'short': '-m',
        'long': '--mongodb-url',
        'help': "mongodb url: format 'mongodb://[username:password@]host[:port][/[database][?options]]'"
    },
    {
        'short': '-o',
        'long': '--output-file', # TODO: or --output-file-prefix?
        'help': "output file to dump index json"
    },
    {
        'short': '-p',
        'long': '--index-filename-pattern',
        'help': "index filename pattern; default 'arl12hrindex.csv'"
    },
    {
        'short': '-i',
        'long': '--ignore-pattern',
        'help': "pattern of dirs/files to ignore; e.g. '/MOVED/'"
    },
    {
        'short': '-s',
        'long': '--start',
        'help': "Ignore all data before this time",
        'action': scripting.args.ParseDatetimeAction
    },
    {
        'short': '-e',
        'long': '--end',
        'help': "Ignore all data after this time",
        'action': scripting.args.ParseDatetimeAction
    }
    # TODO: option to set server name/identifier (default to whatever 'uname'
    #   returns? or is there a some python module for returning data)....or maybe
    #   make this a required arg (or required when storing in mongodb)
    # TODO: option to query mongodb instead of update it...or should
    #   that be in a different script ???
]

EXAMPLES_STR = """Examples:
  $ ./bin/bsp-arlindexer -d DRI2km -r /DRI_6km/
"""

if __name__ == "__main__":
    parser, args = scripting.args.parse_args(REQUIRED_ARGS, OPTIONAL_ARGS,
        epilog=EXAMPLES_STR)
    try:
        start = args.__dict__.pop('start')
        end = args.__dict__.pop('end')
        indexer = arlindexer.ArlIndexer(
            # Pop reqired args so that they're not passed in as 'config'
            # TODO: not really necessary, so maybe just use
            #   `args.domain` and `args.root_dir`
            args.__dict__.pop('domain'),
            args.__dict__.pop('root_dir'),
            **args.__dict__)
        indexer.index(start, end)
    except Exception, e:
        logging.error(e)
        logging.debug(traceback.format_exc())
        scripting.utils.exit_with_msg(e)
