#!/usr/bin/env python

"""bsp: Runs BlueSky

Example calls:
 > ./bin/bsp.py -i fires-before.json -o fires-after.json
 > cat fires-before.json | ./bin/bsp.py > fires-after.json
 > ./bin/bsp.py < fires-before.json > fires-after.json
"""

__author__      = "Joel Dubowy"
__copyright__   = "Copyright 2015, AirFire, PNW, USFS"

import json
import importlib
import logging
import pkgutil
import sys
import traceback
import argparse

from pyairfire import scripting

try:
    from bluesky import modules, models
except:
    import os
    root_dir = os.path.abspath(os.path.join(sys.path[0], '../'))
    sys.path.insert(0, root_dir)
    from bluesky import modules, models

REQUIRED_ARGS = []

OPTIONAL_ARGS = [
    {
        'short': '-l',
        'long': '--list-modules',
        'dest': 'list_modules',
        'help': 'lists available modules; order matters',
        'action': "store_true",
        'default': False
    },
    {
        'short': '-c',
        'long': '--config-file',
        'dest': 'config_file',
        'help': 'config file comtaining overrides for default config values',
        'action': "store",
        'default': None
    },
    {
        'short': '-i',
        'long': '--input-file',
        'dest': 'input_file',
        'help': 'input file comtaining JSON formatted fire data',
        'action': "store",
        'default': None
    },
    {
        'short': '-o',
        'long': '--output-file',
        'dest': 'output_file',
        'help': 'output file comtaining JSON formatted fire data',
        'action': "store",
        'default': None
    },
    {
        'short': '-w',
        'long': '--country-code-whitelist',
        'dest': 'country_code_whitelist',
        'help': 'input file comtaining JSON formatted fire data',
        'action': "append",
        'default': []
    },
    {
        'short': "-D",
        'long': '--config-option',
        'dest': 'config_options',
        'help': "Config option override, formatted like 'Section.Option=value'",
        'action': scripting.args.SetConfigOptionAction
    }
]

POSITIONAL_ARGS = [
    {
        'long': 'module',
        'nargs': '*'
    }
]

# Note: pkgutil.walk_packages recursively walks modules and packages, while
# pkgutil.iter_modules iterates through only modules and packages that are
# one deep
AVAILABLE_MODULES = [
    #p[1].split('.')[-1] for p in pkgutil.iter_modules(modules.__path__, modules.__name__ + '.') #if p[2]
    p[1] for p in pkgutil.iter_modules(modules.__path__)
]

def validate_args(args):
    # TODO: validate args values as necessary
    pass

def exit_with_traceback(e):
    logging.debug(traceback.format_exc())
    scripting.utils.exit_with_msg(e)

def import_modules(args):
    try:
        modules = [
            importlib.import_module('bluesky.modules.%s' % (m)) for m in args.module
        ]
    except ImportError, e:
        logging.debug(traceback.format_exc())
        exit_with_traceback(e)

    return modules

def load_fires(args):
    try:
        fires_importer = models.fires.FiresImporter(
            args.input_file, args.output_file)
        fires_importer.loads()
    except:
        logging.debug(traceback.format_exc())
        exit_with_traceback(e)
    return fires_importer

def run_modules(args, modules, fires_importer):
    try:
        if args.country_code_whitelist:
            fires_importer.filter('country', args.country_code_whitelist)

        for module in modules:
            # TDOO: catch any exception raised by a module and dumps
            # whatever is the current state of fires (or state of fires prior
            # to calling hte module) ?
            # 'run' modifies fires in place
            module.run(fires_importer.fires, args.config_options)
    except Exception, e:
        # when there's an error running modules, don't bail; we'll dump fire
        # data as is
        logging.debug(traceback.format_exc())
        logging.error(e)

def dump_fires(args, fires_importer):
    try:
        fires_importer.dumps()
    except Exception, e:
        logging.debug(traceback.format_exc())
        exit_with_traceback(e)

def main():
    # TODO: figure out way to include available modules in help message,
    # and then remove '--list-modules' option
    def pre_validation(parser, args):
        if args.list_modules:
            scripting.utils.exit_with_msg(
                "Available Modules:\n\t%s" % ('\n\t'.join(AVAILABLE_MODULES)),
                #extra_preceeding_output=lambda: parser.print_help(),
                exit_code=0, prefix="")

    parser, args = scripting.args.parse_args(REQUIRED_ARGS,
        OPTIONAL_ARGS, positional_args=POSITIONAL_ARGS,
        pre_validation=pre_validation)
    validate_args(args)
    scripting.utils.log_config(args.config_options)

    modules =import_modules(args)
    fires_importer = load_fires(args)
    run_modules(args, modules, fires_importer)
    dump_fires(args, fires_importer)

if __name__ == "__main__":
    main()
