#!/usr/bin/env python

"""bsp: Runs...

Example calls:
 > ./bin/bsp.py
"""

__author__      = "Joel Dubowy"
__copyright__   = "Copyright 2015, AirFire, PNW, USFS"

import json
import importlib
import logging
import pkgutil
import sys

from pyairfire import scripting

try:
    from bluesky import modules, models
except:
    import os
    root_dir = os.path.abspath(os.path.join(sys.path[0], '../'))
    sys.path.insert(0, root_dir)
    from bluesky import modules, models

# Note: though some argue that all required parameters should be specified as
# positional arguments, I prefer using 'options' flags, even though this
# meands that there are required 'options', which is oxymoronic.

REQUIRED_OPTIONS = [
    # {
    #     'short': '-m',
    #     'long': '--module',
    #     'dest': 'modules',
    #     'help': 'status logger query API endpoint (required)',
    #     'action': 'append'
    # }
]

OPTIONAL_OPTIONS = [
    {
        'short': '-l',
        'long': '--list-modules',
        'dest': 'list_modules',
        'help': 'lists modules available to use in pipeline; order matters',
        'action': "store_true",
        'default': []
    },
    {
        'short': '-c',
        'long': '--config-file',
        'dest': 'config_file',
        'help': 'config file comtaining overrides for default config values',
        'action': "store",
        'default': None
    },
    {
        'short': '-i',
        'long': '--input-file',
        'dest': 'input_file',
        'help': 'input file comtaining JSON formatted fire data',
        'action': "store",
        'default': None
    },
    {
        'short': '-o',
        'long': '--output-file',
        'dest': 'output_file',
        'help': 'output file comtaining JSON formatted fire data',
        'action': "store",
        'default': None
    }
]

# Note: pkgutil.walk_packages recursively walks nested packages, while
# pkgutil.iter_modules iterates through only modules and packages that
# are one deep
# TODO:
AVAILABLE_MODULES = [
    p[1].split('.')[-1] for p in pkgutil.iter_modules(modules.__path__, modules.__name__ + '.') if p[2]
]

def exit_with_msg(msg, extra_output=None):
    print "* Error: %s\n" % (msg)
    if extra_output:
        extra_output()
    sys.exit(1)

def validate_options(options):
    # TODO: validate options values as necessary
    pass

def main():
    parser, options, args = scripting.options.parse_options(
        REQUIRED_OPTIONS + OPTIONAL_OPTIONS, usage="usage: %prog [options] <module> [<module> ...]")

    # TODO: figure out way to include available modules in help message,
    # and then remove '--list-modules' option
    if options.list_modules:
        scripting.utils.exit_with_msg(
            "Available Modules:\n\t%s" % ('\n\t'.join(AVAILABLE_MODULES)),
            #extra_preceeding_output=lambda: parser.print_help(),
            exit_code=0, prefix="")

    if len(args) == 0:
        scripting.utils.exit_with_msg("Specify one or more BlueSky modules", extra_output=lambda: parser.print_help())

    scripting.options.check_required_options(options, REQUIRED_OPTIONS, parser)
    validate_options(options)
    scripting.options.configure_logging_from_options(options, parser)
    scripting.options.output_options(parser)

    try:
        modules = [
            importlib.import_module('bluesky.modules.%s' % (m)) for m in args
        ]
    except ImportError, e:
        scripting.utils.exit_with_msg(e.message,
            extra_output=lambda: parser.print_help())

    try:
        fires = models.fires.Fire.loads(options)

        for module in modules:
            module.run(fires) # modifies fires in place

        models.fires.Fire.dumps(fires, options.output_file)

    except Exception, e:
        raise
        exit_with_msg(e.message)

if __name__ == "__main__":
    main()
