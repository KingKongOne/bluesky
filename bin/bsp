#!/usr/bin/env python

"""bsp: Runs BlueSky

Example calls:
 > bsp -i fires-before.json -o fires-after.json
 > cat fires-before.json | bsp > fires-after.json
 > bsp < fires-before.json > fires-after.json
"""

__author__      = "Joel Dubowy"
__copyright__   = "Copyright 2015, AirFire, PNW, USFS"

import json
import importlib
import logging
import pkgutil
import sys
import traceback
import argparse

from pyairfire import scripting

try:
    from bluesky import modules, models, __version__
except:
    import os
    root_dir = os.path.abspath(os.path.join(sys.path[0], '../'))
    sys.path.insert(0, root_dir)
    from bluesky import modules, models, __version__

REQUIRED_ARGS = []

OPTIONAL_ARGS = [
    {
        'short': '-c',
        'long': '--config-file',
        'dest': 'config_file',
        'help': 'config file comtaining overrides for default config values',
        'action': "store",
        'default': None
    },
    {
        'short': '-i',
        'long': '--input-file',
        'dest': 'input_file',
        'help': 'input file comtaining JSON formatted fire data',
        'action': "store",
        'default': None
    },
    {
        'short': '-o',
        'long': '--output-file',
        'dest': 'output_file',
        'help': 'output file comtaining JSON formatted fire data',
        'action': "store",
        'default': None
    },
    {
        'short': '-w',
        'long': '--country-code-whitelist',
        'dest': 'country_code_whitelist',
        'help': 'input file comtaining JSON formatted fire data',
        'action': "append",
        'default': []
    },
    {
        'short': "-D",
        'long': '--config-option',
        'dest': 'config_options',
        'help': "Config option override, formatted like 'Section.Option=value'",
        'action': scripting.args.SetConfigOptionAction
    },
    {
        #'short': "-v",
        'long': '--version',
        'dest': 'version',
        'action': 'store_true',
        'help': "Output bluesky version and exit.",
        'default': False
    }
]

POSITIONAL_ARGS = [
    {
        'long': 'module',
        'nargs': '*'
    }
]

# Note: pkgutil.walk_packages recursively walks modules and packages, while
# pkgutil.iter_modules iterates through only modules and packages that are
# one deep
AVAILABLE_MODULES = [
    #p[1].split('.')[-1] for p in pkgutil.iter_modules(modules.__path__, modules.__name__ + '.') #if p[2]
    p[1] for p in pkgutil.iter_modules(modules.__path__)
]
# Note: the trailing space seems to be the only way to add an extra trailing line
AVAILABLE_MODULES_STR = """\
Available Modules:
    {}
 """.format('\n    '.join(AVAILABLE_MODULES))

def validate_args(args):
    # TODO: validate args values as necessary
    pass

def exit_with_traceback(e):
    logging.error(e)
    logging.debug(traceback.format_exc())
    scripting.utils.exit_with_msg(e)

def import_modules(args):
    try:
        modules = [
            importlib.import_module('bluesky.modules.%s' % (m)) for m in args.module
        ]
    except Exception, e: #ImportError, e:
        exit_with_traceback(e)

    return modules

def load_fires(args):
    try:
        fires_manager = models.fires.FiresManager(
            input_file=args.input_file, output_file=args.output_file)
        fires_manager.loads()
    except Exception, e:
        exit_with_traceback(e)
    return fires_manager

def run_modules(args, modules, fires_manager):
    try:
        if args.country_code_whitelist:
            fires_manager.filter('country', args.country_code_whitelist)

        for module in modules:
            # TDOO: catch any exception raised by a module and dumps
            # whatever is the current state of fires (or state of fires prior
            # to calling hte module) ?
            # 'run' modifies fires in place
            module.run(fires_manager.fires, args.config_options)
    except Exception, e:
        # when there's an error running modules, don't bail; fire data will be
        # dumped as is
        logging.error(e)
        tb = traceback.format_exc()
        logging.debug(tb)
        fires_manager.error = {
            "message": str(e),
            "traceback": str(tb)
        }

def dump_fires(args, fires_manager):
    try:
        fires_manager.dumps()
    except Exception, e:
        exit_with_traceback(e)

def output_version(parser, args):
    if args.version:
        sys.stdout.write("bsp (bluesky) version {}\n".format(__version__))
        sys.exit(0)

def main():
    parser, args = scripting.args.parse_args(REQUIRED_ARGS, OPTIONAL_ARGS,
        positional_args=POSITIONAL_ARGS, epilog=AVAILABLE_MODULES_STR,
        pre_validation=output_version)

    validate_args(args)
    scripting.utils.log_config(args.config_options)

    modules = import_modules(args)
    fires_manager = load_fires(args)
    run_modules(args, modules, fires_manager)
    dump_fires(args, fires_manager)

if __name__ == "__main__":
    main()
