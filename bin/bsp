#!/usr/bin/env python

"""bsp: Runs BlueSky

Example calls:
 > ./bin/bsp.py -i fires-before.json -o fires-after.json
 > cat fires-before.json | ./bin/bsp.py > fires-after.json
 > ./bin/bsp.py < fires-before.json > fires-after.json
"""

__author__      = "Joel Dubowy"
__copyright__   = "Copyright 2015, AirFire, PNW, USFS"

import json
import importlib
import logging
import pkgutil
import sys
import traceback

from pyairfire import scripting

try:
    from bluesky import modules, models
except:
    import os
    root_dir = os.path.abspath(os.path.join(sys.path[0], '../'))
    sys.path.insert(0, root_dir)
    from bluesky import modules, models

def parse_format(option, opt, value, parser):
    """
    """
    value = value.strip()
    try:
        setattr(parser.values, option.dest, models.fires.FireDataFormats[value])
    except models.fires.FireDataFormatNotSupported:
        msg = "Invalid fire data format: %s" % (value)
        raise OptionValueError(msg)

# Note: though some argue that all required parameters should be specified as
# positional arguments, I prefer using 'options' flags, even though this
# means that there are required 'options', which is oxymoronic.

REQUIRED_OPTIONS = []

OPTIONAL_OPTIONS = [
    {
        'short': '-l',
        'long': '--list-modules',
        'dest': 'list_modules',
        'help': 'lists modules available to use in pipeline; order matters',
        'action': "store_true",
        'default': False
    },
    {
        'short': '-c',
        'long': '--config-file',
        'dest': 'config_file',
        'help': 'config file comtaining overrides for default config values',
        'action': "store",
        'default': None
    },
    {
        'short': '-i',
        'long': '--input-file',
        'dest': 'input_file',
        'help': 'input file comtaining JSON formatted fire data',
        'action': "store",
        'default': None
    },
    {
        'short': '-o',
        'long': '--output-file',
        'dest': 'output_file',
        'help': 'output file comtaining JSON formatted fire data',
        'action': "store",
        'default': None
    },
    {
        'long': '--input-format',
        'dest': 'input_format',
        'type': "string",
        'help': 'format of input fire data; valid formats: %s; default: json' % (
            ', '.join(models.fires.FireDataFormats.formats)),
        'action': "callback",
        'callback': parse_format,
        'default': models.fires.FireDataFormats.json
    },
    {
        'long': '--output-format',
        'dest': 'output_format',
        'type': "string",
        'help': 'format to output fire data; valid formats: %s; default: json' % (
            ', '.join(models.fires.FireDataFormats.formats)),
        'action': "callback",
        'callback': parse_format,
        'default': models.fires.FireDataFormats.json
    },
    {
        'short': '-w',
        'long': '--country-code-whitelist',
        'dest': 'country_code_whitelist',
        'help': 'input file comtaining JSON formatted fire data',
        'action': "append",
        'default': []
    }
]

# Note: pkgutil.walk_packages recursively walks nested packages, while
# pkgutil.iter_modules iterates through only modules and packages that
# are one deep
# TODO:
AVAILABLE_MODULES = [
    p[1].split('.')[-1] for p in pkgutil.iter_modules(modules.__path__, modules.__name__ + '.') if p[2]
]

def validate_options(options):
    # TODO: validate options values as necessary
    pass

def main():
    # TODO: figure out way to include available modules in help message,
    # and then remove '--list-modules' option
    def pre_validation(parser, options):
        if options.list_modules:
            scripting.utils.exit_with_msg(
                "Available Modules:\n\t%s" % ('\n\t'.join(AVAILABLE_MODULES)),
                #extra_preceeding_output=lambda: parser.print_help(),
                exit_code=0, prefix="")

    parser, options, args = scripting.options.parse_options(REQUIRED_OPTIONS,
        OPTIONAL_OPTIONS, usage="usage: %prog [options] [<module> ...]",
        pre_validation=pre_validation)

    scripting.options.check_required_options(options, REQUIRED_OPTIONS, parser)
    validate_options(options)
    scripting.options.configure_logging_from_options(options, parser)
    scripting.options.output_options(options)

    try:
        modules = [
            importlib.import_module('bluesky.modules.%s' % (m)) for m in args
        ]
    except ImportError, e:
        scripting.utils.exit_with_msg(e.message,
            extra_output=lambda: parser.print_help())

    try:
        fires_importer = models.fires.FiresImporter(
            options.input_file, options.output_file)
        fires_importer.loads(options.input_format)

        if options.country_code_whitelist:
            fires_importer.filter('country', option.country_code_whitelist)

        for module in modules:
            # TDOO: catch any exception raised by a module and dumps
            # whatever is the current state of fires (or state of fires prior
            # to calling hte module) ?
            module.run(fires_importer.fires) # modifies fires in place

        fires_importer.dumps(options.output_format)

    except Exception, e:
        print traceback.format_exc()
        scripting.utils.exit_with_msg(e.message)

if __name__ == "__main__":
    main()
