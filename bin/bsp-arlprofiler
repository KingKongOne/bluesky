#! /usr/bin/env python

__author__ = "Joel Dubowy"
__copyright__ = "Copyright 2015, AirFire, PNW, USFS"

import json
import tornado.ioloop

from pyairfire import scripting

try:
    from bluesky import arlprofiler
except:
    import os
    import sys
    root_dir = os.path.abspath(os.path.join(sys.path[0], '../'))
    sys.path.insert(0, root_dir)
    from bluesky import arlprofiler

REQUIRED_ARGS = [
    {
        'short': '-d',
        'long': '--met-root-dir',
        'dest': 'met_root_dir',
        'help': 'Root directory containing met data',
        'action': 'store'
    },
    {
        'short': '-s',
        'long': '--start',
        'dest': 'start',
        'help': 'start datetime',
        'action': scripting.args.ParseDatetimeAction
    },
    {
        'short': '-e',
        'long': '--end',
        'dest': 'end',
        'help': 'end datetime',
        'action': scripting.args.ParseDatetimeAction
    },
    {
        'short': '-l',
        'long': '--lat',
        'dest': 'lat',
        'help': 'latitude',
        'action': 'store',
        'type': float
    },
    {
        'short': '-g',
        'long': '--lng',
        'dest': 'lng',
        'help': 'longitude',
        'action': 'store',
        'type': float
    }

]
OPTIONAL_ARGS = [
    {
        'short': '-p',
        'long': '--profile-exe',
        'dest': 'profile_exe',
        'help': 'Profile executable',
        'action': 'store'
    },
    {
        'short': '-t',
        'long': '--time_step',
        'dest': 'time_step',
        'help': 'Time step',
        'action': 'store',
        'type': int
    }
]

EXAMPLES_STR = """Examples:
  $ PATH=~/path/to/profile/exe/dir/:$PATH \\
     ./bin/bsp-arlprofiler -d /DRI_6km/ \\
     -s 2014-05-29T20:00:00 -e 2014-05-30T00:00:00 \\
     -l 37 -g -121
"""

if __name__ == "__main__":
    parser, args = scripting.args.parse_args(REQUIRED_ARGS, OPTIONAL_ARGS,
        epilog=EXAMPLES_STR)
    profiler = arlprofiler.ArlProfiler(args.met_root_dir,
        profile_exe=args.profile_exe)
    print json.dumps(profiler.profile(args.start, args.end, args.lat,
        args.lng))