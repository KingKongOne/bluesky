#! /usr/bin/env python

__author__ = "Joel Dubowy"
__copyright__ = "Copyright 2015, AirFire, PNW, USFS"

import json
import logging
import sys
import traceback

from pyairfire import scripting

try:
    from bluesky.met import arlprofiler
except:
    import os
    root_dir = os.path.abspath(os.path.join(sys.path[0], '../'))
    sys.path.insert(0, root_dir)
    from bluesky.met import arlprofiler

class ParseArlFilesAction(scripting.args.Action):

    def __call__(self, parser, namespace, value, option_string=None):
        """Splits value into key/value, and set in destination dict

        Note: Expects value to be of the format 'key=value'.  Also expects
        destination (i.e. parser.value's self.dest attribute), to be
        initialized as an empty dict.
        """
        m = value.split(';')
        if len(m) != 4:
            msg = ("Invalid value '{}' for option '{}' - value must be of the "
                "form '<file>;<first>;<start>;<end>', where 'first', 'start', "
                "'end' are UTC".format(value, option_string))
            raise scripting.args.ArgumentTypeError(msg)
        d = getattr(namespace, self.dest)
        d = d or []
        d.append({"file": m[0], "first": m[1], "start": m[2], "end": m[3]})
        setattr(namespace, self.dest, d)

REQUIRED_ARGS = [
    {
        'short': '-f',
        'long': '--met-file',
        'dest': 'met_files',
        'help': "Met file with it's first hour and the date range to use it"
            " for; format '<file>;<first>;<start>;<end>'; 'first', 'start', "
            "and 'end' are expected to be UTC",
        'action': ParseArlFilesAction
    },
    {
        'short': '-l',
        'long': '--lat',
        'dest': 'lat',
        'help': 'latitude',
        'action': 'store',
        'type': float
    },
    {
        'short': '-g',
        'long': '--lng',
        'dest': 'lng',
        'help': 'longitude',
        'action': 'store',
        'type': float
    },
    {
        'short': '-o',
        'long': '--utc-offset',
        'dest': 'utc_offset',
        'help': 'utc offset at lat/lng',
        'action': 'store',
        'type': float
    }

]
OPTIONAL_ARGS = [
    {
        'short': '-p',
        'long': '--profile-exe',
        'dest': 'profile_exe',
        'help': 'Profile executable',
        'action': 'store'
    },
    {
        'short': '-t',
        'long': '--time_step',
        'dest': 'time_step',
        'help': 'Time step',
        'action': 'store',
        'type': int
    }
]

EXAMPLES_STR = """Examples:
  $ PATH=~/path/to/profile/exe/dir/:$PATH \\
     ./bin/bsp-arlprofiler \\
     -f "/DRI_6km/2014052912/wrfout_d2.2014052912.f00-11_12hr01.arl;2014-05-29T12:00:00;2014-05-29T20:00:00;2014-05-29T23:00:00" \\
     -f "/DRI_6km/2014053000/wrfout_d2.2014053000.f00-11_12hr01.arl;2014-05-30T00:00:00;2014-05-30T00:00:00;2014-05-30T01:00:00" \\
     -l 37 -g -121
  $ PATH=~/path/to/profile/exe/dir/:$PATH \\
     ./bin/bsp-arlprofiler  \\
     -f "/DRI_6km/2014053000/wrfout_d2.2014053000.f00-11_12hr01.arl;2014-05-30T00:00:00;2014-05-30T00:00:00;2014-05-30T01:00:00" \\
     -l 37 -g -121 -t 2
"""

if __name__ == "__main__":
    parser, args = scripting.args.parse_args(REQUIRED_ARGS, OPTIONAL_ARGS,
        epilog=EXAMPLES_STR)
    try:
        profiler = arlprofiler.ArlProfiler(args.met_files,
            profile_exe=args.profile_exe)
        arl_profile = profiler.profile(args.lat, args.lng, args.utc_offset,
            time_step=args.time_step)
        sys.stdout.write(json.dumps(arl_profile))
    except Exception, e:
        logging.error(e)
        logging.debug(traceback.format_exc())
        scripting.utils.exit_with_msg(e)
