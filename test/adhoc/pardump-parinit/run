#!/usr/bin/env bash

show_help=false
no_prompts=false

while [ -n "$1" ]; do # while loop starts
    case "$1" in
    -h) show_help=true && shift ;;
    --help) show_help=true && shift ;;
    --no-prompts) no_prompts=true && shift ;;
    *) echo "Option $1 not recognized" && exit 1 ;;
    esac
done

if [ "$show_help" = true ] ; then
    echo ""
    echo "Options:"
    echo "   -h/--help     - show this help message"
    echo "   --no-prompts  - Don't prompt to continue after each run"
    echo ""
    echo "Usage:"
    echo "   $0"
    echo "   $0 --no-prompts"
    echo ""
    exit 0
fi

DIR=`dirname $0`
DIR=`python -c "import os;print(os.path.abspath('$DIR'))"`
echo "Script dir: $DIR"

REPO_DIR=`python -c "import os;print(os.path.abspath('$DIR/../../../'))"`
echo "Repo dir: $REPO_DIR"


prompt_to_continue () {
    if [ "$no_prompts" = false ] ; then
        read -p "Do you want to continue? [yN]: " -r
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo "*** ABORTING."
            exit 1
        fi
        echo "Continuing...."
    fi
}

check_return_code () {
    if [ $? -ne 0 ]; then
        echo "*** Bluesky run FAILED."
        echo "*** ABORTING."
        exit 1
    fi
    prompt_to_continue
}

run_bsp () {
    TODAY=$1
    FIRES=$2
    PI_FIRES=$3
    MAKE_INIT_FILE=$4
    NINIT=$5

    PARINIT_STR=""
    if [ "$MAKE_INIT_FILE" = true ] ; then
        PARINIT_STR="writing parinit"
    fi
    PARDUMP_STR=""
    if [ "$NINIT" -eq 1 ] ; then
        PARDUMP_STR="writing pardump"
    fi
    echo "Running $TODAY, $FIRES, $PARINIT_STR, $PARDUMP_STR"

    echo docker run --rm -ti -v $DIR/:/data/ -v $HOME/Met/:/Met/ \
        -v $REPO_DIR/:/bluesky/ -e PYTHONPATH=/bluesky/ \
        -e PATH=/bluesky/bin/:$PATH bluesky bsp --log-level DEBUG \
        --today=$TODAY \
        --log-file /data/output-$TODAY-$FIRES-$PI_FIRES.log \
        -i /data/input-$TODAY-$FIRES.json \
        -o /data/output-pardump-$TODAY-$FIRES.json \
        -c /data/config.json \
        -C plumerising.feps.working_dir=/data/working/plumerising/$TODAY-$FIRES-$PI_FIRES/ \
        -C dispersion.output_dir=/data/output/$TODAY-$FIRES-$PI_FIRES/ \
        -C dispersion.working_dir=/data/working/dispersion/$TODAY-$FIRES-$PI_FIRES/ \
        -B dispersion.hysplit.MAKE_INIT_FILE=$MAKE_INIT_FILE \
        -I dispersion.hysplit.NDUMP=24 \
        -I dispersion.hysplit.NCYCL=0 \
        -C dispersion.hysplit.PARDUMP=/data/particlefiles/pardump-{today:%Y-%m-%d}-$FIRES \
        -I dispersion.hysplit.NINIT=$NINIT \
        -C dispersion.hysplit.PARINIT=/data/particlefiles/pardump-{today-1:%Y-%m-%d}-$FIRES \
        ingestion fuelbeds consumption emissions \
        timeprofiling findmetdata localmet plumerising \
        dispersion visualization
    check_return_code
}

run_bsp 2018-05-29 1F na true 0
run_bsp 2018-05-29 2F na true 0
run_bsp 2018-05-30 1F 1F false 1
run_bsp 2018-05-30 1F 2F false 1
run_bsp 2018-05-30 1F na false 0
run_bsp 2018-05-30 2F 1F false 1
run_bsp 2018-05-30 2F 2F false 1
run_bsp 2018-05-30 2F na false 0

# TODO:
#   - make sure num_processes was 2 each run
#   - make sure dummy fire was filled in for first day
#   - ...
