#!/usr/bin/env bash

show_help=false
no_prompts=false
run_strings=()

show_help_message () {
    echo ""
    echo "Options:"
    echo "   -h/--help     - show this help message"
    echo "   --no-prompts  - Don't prompt to continue after each run"
    echo ""
    echo "Usage:"
    echo
    echo "   $0 2014-05-29,1Fire,pardump,true,0 \\"
    echo "      2014-05-30,1Fire,parinit1Fire,false,1 2014-05-30,1Fire,na,false,0 \\"
    echo "      2014-05-30,2Fire,parinit1Fire,false,1 2014-05-30,2Fire,na,false,0 \\"
    echo
    echo "   $0 2014-05-29,2Fire,pardump,true,0 \\"
    echo "      2014-05-30,1Fire,parinit2Fire,false,1 2014-05-30,1Fire,na,false,0 \\"
    echo "      2014-05-30,2Fire,parinit2Fire,false,1 2014-05-30,2Fire,na,false,0"
    echo
    echo "   $0 --no-prompts \\"
    echo "      2014-05-29,1Fire,na,false,0 2014-05-30,1Fire,1piFire,false,1"
    echo

# run_bsp 2014-05-29 2Fire na true 0
# run_bsp 2014-05-30 1Fire 2piFire false 1
# run_bsp 2014-05-30 2Fire na false 0
# run_bsp 2014-05-30 2Fire 2piFire false 1

# see what happens when run tries to load pardump file nad
# it desn't exist
# run_bsp 2014-05-29 1Fire na-nodump false 0
# run_bsp 2014-05-30 1Fire 1piFire-nodump false 1
    echo ""
    if [ $# -ne 0 ]; then
        echo ""
        echo "*** ERROR:  $1"
        echo ""
    fi

    exit 0
}

while [ -n "$1" ]; do # while loop starts
    case "$1" in
    -h) show_help=true && shift ;;
    --help) show_help=true && shift ;;
    --no-prompts) no_prompts=true && shift ;;
    *) run_strings+=($1) && shift ;;
    esac
done

run_arrays=()
# if no runs were specified, show help
if [ ${#run_strings[@]} -eq 0 ]; then
    show_help_message
else
    for run_string in "${run_strings[@]}"; do
        run_array=()
        for e in `echo $run_string | tr "," "\n"`; do
            run_array+=($e)
        done
        if [ ${#run_array[@]} -ne 5 ]; then
            show_help_message "Invalid run: $run_string"
        fi
        run_arrays+=($run_array)
    done
fi

if [ "$show_help" = true ] ; then
    show_help_message
fi

DIR=`dirname $0`
DIR=`python -c "import os;print(os.path.abspath('$DIR'))"`
echo "Script dir: $DIR"

REPO_DIR=`python -c "import os;print(os.path.abspath('$DIR/../../../'))"`
echo "Repo dir: $REPO_DIR"


prompt_to_continue () {
    if [ "$no_prompts" = false ] ; then
        read -p "Do you want to continue? [yN]: " -r
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo "*** ABORTING."
            exit 1
        fi
        echo "Continuing...."
    fi
}

check_return_code () {
    if [ $? -ne 0 ]; then
        echo "*** Bluesky run FAILED."
        echo "*** ABORTING."
        exit 1
    fi
    prompt_to_continue
}

run_bsp () {
    TODAY=$1
    FIRES=$2
    PI_FIRES=$3
    MAKE_INIT_FILE=$4
    NINIT=$5

    PARINIT_STR=""
    if [ "$MAKE_INIT_FILE" = true ] ; then
        PARINIT_STR="writing parinit"
    fi
    PARDUMP_STR=""
    if [ "$NINIT" = "1" ] ; then
        PARDUMP_STR="reading pardump"
    fi
    echo "Running $TODAY, $FIRES, $PARINIT_STR, $PARDUMP_STR"

    echo docker run --rm -ti -v $DIR/:/data/ -v $HOME/Met/:/Met/ \
        -v $REPO_DIR/:/bluesky/ -e PYTHONPATH=/bluesky/ \
        -e PATH=/bluesky/bin/:$PATH bluesky \
        bsp --log-level DEBUG --indent 4 --today=$TODAY \
        --log-file /data/output-$TODAY-$FIRES-$PI_FIRES.log \
        -i /data/input-$TODAY-$FIRES.json \
        -o /data/output-$TODAY-$FIRES-$PI_FIRES.json \
        -c /data/config.json \
        -C plumerising.feps.working_dir=/data/working/plumerising/$TODAY-$FIRES-$PI_FIRES/ \
        -C dispersion.output_dir=/data/output/$TODAY-$FIRES-$PI_FIRES/ \
        -C dispersion.working_dir=/data/working/dispersion/$TODAY-$FIRES-$PI_FIRES/ \
        -B dispersion.hysplit.MAKE_INIT_FILE=$MAKE_INIT_FILE \
        -I dispersion.hysplit.NDUMP=24 \
        -I dispersion.hysplit.NCYCL=0 \
        -C dispersion.hysplit.PARDUMP=/data/particlefiles/pardump-{today:%Y-%m-%d}-$FIRES \
        -I dispersion.hysplit.NINIT=$NINIT \
        -C dispersion.hysplit.PARINIT=/data/particlefiles/pardump-{today-1:%Y-%m-%d}-$FIRES \
        ingestion fuelbeds consumption emissions \
        timeprofiling findmetdata localmet plumerising \
        dispersion visualization
    check_return_code
}

for run_array in "${run_arrays[@]}"; do
    run_bsp "${run_array[@]}"
done


# TODO:
#   - make sure num_processes was 2 each run
#   - make sure dummy fire was filled in for first day
#   - ...

