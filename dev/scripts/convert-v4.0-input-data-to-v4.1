#!/usr/bin/env python3

import argparse
import logging

EXAMPLES_STRING = """
Examples:

    {script} --log-level INFO -i input-v4.0.json -o input-v4.1.json

 """.format(script=sys.argv[0])
def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--input', help="input file", required=True)
    parser.add_argument('-o', '--output', help="output file", required=True)
    parser.add_argument('--indent', help="json indentation", type=int)
    parser.add_argument('--log-level', default="INFO", help="Log level")

    parser.epilog = EXAMPLES_STRING
    parser.formatter_class = argparse.RawTextHelpFormatter

    args = parser.parse_args()

    logging.basicConfig(level=getattr(logging, args.log_level),
        format='%(asctime)s %(levelname)s: %(message)s')

    logging.info(" Args:")
    for k,v in args.__dict__.items():
        logging.info("   %s: %s", k, v)

    return args


def convert(input_data):
    fires = (input_data.pop('fires', None)
        or input_data.pop('fire_information', []))
    input_data['fires'] = []
    for fire in fires:
        activity = fire.pop('activity', None) or fire.pop('growth', [])
        fire['activity'] = []
        for old_a in activity:
            loc = old_a.pop('location', {})
            lat = loc.pop('latitude', None)
            lng = loc.pop('longitude', None)
            area = loc.pop('area', None)
            geojson = loc.pop('geojson', None)

            new_a['active_areas'] = []

            if lat is not None and lng is not None:
                aa = dict(old_a, **loc)
                aa["specified_points"] = [{
                    "lat": lat,
                    "lng": lng,
                    "area": area
                }]
                new_a["active_areas"].append(aa)

            elif geojson:
                if geojson['type'] == 'Polygon':
                    aa = dict(old_a, **loc)
                    aa["perimeter"] = {
                        "polygon": geojson['coordinates'][0]
                    }
                    new_a["active_areas"].append(aa)

                elif if geojson['type'] == 'MultiPolygon':
                    for p in geojson['coordinates']:
                        aa = dict(old_a, **loc)
                        aa["perimeter"] = {
                            "polygon": p[0]
                        }
                        new_a['active_areas'].append(aa)

                elif geojson['type'] == 'MultiPoint' and area:
                    aa = dict(old_a, **loc)
                    aa["specified_points"] = []
                    for p in geojson['coordinates']:
                        aa["specified_points"].append({
                            "lat": p[0][1],
                            "lng": p[0][0],
                            "area": area / len(geojson['coordinates'])
                        })
                    new_a['active_areas'].append(aa)

                elif geojson['type'] == 'Point' and area:
                    aa = dict(old_a, **loc)
                    aa["specified_points"] = [{
                        "lat": geojson['coordinates'][1],
                        "lng": geojson['coordinates'][0],
                        "area": area
                    }]
                    new_a['active_areas'].append(aa)

                else:
                    raise ValueError("Can't convert fire: %s", fire)

            else:
                raise ValueError("Can't convert fire: %s", fire)

            fire['activity'].append(new_a)

        input_data['fires'].append(fire)

    return input_data


def main():
    args = parse_args()

    with open(args.input, 'r') as f:
        input_data = json.loads(f.read())

    new_input_data = convert(input_data)

    with open(args.output, 'w') as f:
        f.write(json.dumps(new_input_data), indent=args.indent)

if __name__ == "__main__":
    main()
